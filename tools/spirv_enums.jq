import "gen" as gen;
import "spirv" as spv;

(.instructions | spv::filter_opcodes) as $opcodes
| [
  "#pragma once\n",
  "// GENERATED HEADER - Do not edit.\n",
  "namespace j::rendering::vulkan::inline spirv {",
  (($opcodes + [{ always_include: true, opname: "OpInvalid", opcode: 65535 }]) | spv::emit_enum("opcode"; .opname; .opcode; "")),
  "",
  (.operand_kinds | spv::find_enum("ImageFormat") | .enumerants | spv::emit_enum("image_format"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("AccessQualifier") | .enumerants | spv::emit_enum("access_qualifier"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("StorageClass") | .enumerants | spv::emit_enum("storage_class"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("Capability") | .enumerants | spv::emit_enum("capability"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("Decoration") | .enumerants | spv::emit_enum("decoration"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("AddressingModel") | .enumerants | spv::emit_enum("addressing_model"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("MemoryAccess") | .enumerants | spv::emit_enum("memory_access"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("MemoryModel") | .enumerants | spv::emit_enum("memory_model"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("ExecutionMode") | .enumerants | spv::emit_enum("execution_mode"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("ExecutionModel") | .enumerants | spv::emit_enum("execution_model"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("FunctionControl") | .enumerants | spv::emit_enum("function_control"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("SourceLanguage") | .enumerants | spv::emit_enum("source_language"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("LoopControl") | .enumerants | spv::emit_enum("loop_control"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("ImageOperands") | .enumerants | spv::emit_enum("image_operands"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("SamplerAddressingMode") | .enumerants | spv::emit_enum("sampler_addressing_mode"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("SamplerFilterMode") | .enumerants | spv::emit_enum("sampler_filter_mode"; .enumerant; .value; "")),
  "",
  (.operand_kinds | spv::find_enum("SelectionControl") | .enumerants | spv::emit_enum("selection_control"; .enumerant; .value; "")),
  "}"
] | gen::lines_to_string
