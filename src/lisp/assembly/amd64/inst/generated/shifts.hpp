#pragma once
// GENERATED HEADER

#include <lisp/assembly/amd64/instruction.hpp>

namespace j::lisp::assembly::amd64::inst {
  constexpr inline instruction<12> rcl = {
    .name      = "rcl",
    .encodings = {
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "D1 /2",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "D3 /2",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "C1 /2 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .opcode = {0xD0U, 0x00U, 0x00U, 0x00U},
        .name = "D0 /2",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .opcode = {0xD2U, 0x00U, 0x00U, 0x00U},
        .name = "D2 /2",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .imm_format = imm_format::imm8,
        .opcode = {0xC0U, 0x00U, 0x00U, 0x00U},
        .name = "C0 /2 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D1 /2",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D3 /2",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W C1 /2 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "66 D1 /2",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "66 D3 /2",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 2,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "66 C1 /2 ib",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<12> rcr = {
    .name      = "rcr",
    .encodings = {
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "D1 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "D3 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "C1 /3 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xD0U, 0x00U, 0x00U, 0x00U},
        .name = "D0 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xD2U, 0x00U, 0x00U, 0x00U},
        .name = "D2 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .imm_format = imm_format::imm8,
        .opcode = {0xC0U, 0x00U, 0x00U, 0x00U},
        .name = "C0 /3 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D1 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D3 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W C1 /3 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "66 D1 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "66 D3 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "66 C1 /3 ib",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<12> rol = {
    .name      = "rol",
    .encodings = {
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "D1 /0",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "D3 /0",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "C1 /0 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .opcode = {0xD0U, 0x00U, 0x00U, 0x00U},
        .name = "D0 /0",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .opcode = {0xD2U, 0x00U, 0x00U, 0x00U},
        .name = "D2 /0",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm8,
        .opcode = {0xC0U, 0x00U, 0x00U, 0x00U},
        .name = "C0 /0 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D1 /0",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D3 /0",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W C1 /0 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "66 D1 /0",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "66 D3 /0",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "66 C1 /0 ib",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<12> ror = {
    .name      = "ror",
    .encodings = {
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "D1 /1",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "D3 /1",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "C1 /1 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .opcode = {0xD0U, 0x00U, 0x00U, 0x00U},
        .name = "D0 /1",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .opcode = {0xD2U, 0x00U, 0x00U, 0x00U},
        .name = "D2 /1",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .imm_format = imm_format::imm8,
        .opcode = {0xC0U, 0x00U, 0x00U, 0x00U},
        .name = "C0 /1 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D1 /1",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D3 /1",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W C1 /1 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "66 D1 /1",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "66 D3 /1",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 1,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "66 C1 /1 ib",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<12> sal = {
    .name      = "sal",
    .encodings = {
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "D1 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "D3 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "C1 /4 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD0U, 0x00U, 0x00U, 0x00U},
        .name = "D0 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD2U, 0x00U, 0x00U, 0x00U},
        .name = "D2 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .imm_format = imm_format::imm8,
        .opcode = {0xC0U, 0x00U, 0x00U, 0x00U},
        .name = "C0 /4 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D1 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D3 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W C1 /4 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "66 D1 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "66 D3 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "66 C1 /4 ib",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<12> sar = {
    .name      = "sar",
    .encodings = {
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "D1 /7",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "D3 /7",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "C1 /7 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xD0U, 0x00U, 0x00U, 0x00U},
        .name = "D0 /7",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xD2U, 0x00U, 0x00U, 0x00U},
        .name = "D2 /7",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .imm_format = imm_format::imm8,
        .opcode = {0xC0U, 0x00U, 0x00U, 0x00U},
        .name = "C0 /7 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D1 /7",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D3 /7",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W C1 /7 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "66 D1 /7",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "66 D3 /7",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "66 C1 /7 ib",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<12> shl = {
    .name      = "shl",
    .encodings = {
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "D1 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "D3 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "C1 /4 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD0U, 0x00U, 0x00U, 0x00U},
        .name = "D0 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD2U, 0x00U, 0x00U, 0x00U},
        .name = "D2 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .imm_format = imm_format::imm8,
        .opcode = {0xC0U, 0x00U, 0x00U, 0x00U},
        .name = "C0 /4 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D1 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D3 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W C1 /4 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "66 D1 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "66 D3 /4",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "66 C1 /4 ib",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<6> shld = {
    .name      = "shld",
    .encodings = {
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::r32, special_case_any_rcx),
        .operand_format = operand_format::mr_implicit,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xA5U, 0x00U, 0x00U},
        .name = "0F A5 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::r32, operand_type_mask::imm8),
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_2,
        .imm_format = imm_format::imm8,
        .opcode = {0x0FU, 0xA4U, 0x00U, 0x00U},
        .name = "0F A4 /r ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::r64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::mr_implicit,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xA5U, 0x00U, 0x00U},
        .name = "REX.W 0F A5 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::r64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_2,
        .imm_format = imm_format::imm8,
        .opcode = {0x0FU, 0xA4U, 0x00U, 0x00U},
        .name = "REX.W 0F A4 /r ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::r16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::mr_implicit,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xA5U, 0x00U, 0x00U},
        .name = "66 0F A5 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::r16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_2,
        .imm_format = imm_format::imm8,
        .opcode = {0x0FU, 0xA4U, 0x00U, 0x00U},
        .name = "66 0F A4 /r ib",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<12> shr = {
    .name      = "shr",
    .encodings = {
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "D1 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "D3 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "C1 /5 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xD0U, 0x00U, 0x00U, 0x00U},
        .name = "D0 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, special_case_any_rcx),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xD2U, 0x00U, 0x00U, 0x00U},
        .name = "D2 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm8,
        .opcode = {0xC0U, 0x00U, 0x00U, 0x00U},
        .name = "C0 /5 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D1 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W D3 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W C1 /5 ib",
      },
      {
        .mask = make_shift_by_one_mask(operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xD1U, 0x00U, 0x00U, 0x00U},
        .name = "66 D1 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xD3U, 0x00U, 0x00U, 0x00U},
        .name = "66 D3 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm8,
        .opcode = {0xC1U, 0x00U, 0x00U, 0x00U},
        .name = "66 C1 /5 ib",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<6> shrd = {
    .name      = "shrd",
    .encodings = {
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::r32, special_case_any_rcx),
        .operand_format = operand_format::mr_implicit,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xADU, 0x00U, 0x00U},
        .name = "0F AD /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::r32, operand_type_mask::imm8),
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_2,
        .imm_format = imm_format::imm8,
        .opcode = {0x0FU, 0xACU, 0x00U, 0x00U},
        .name = "0F AC /r ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::r64, special_case_any_rcx),
        .has_rex_w = true,
        .operand_format = operand_format::mr_implicit,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xADU, 0x00U, 0x00U},
        .name = "REX.W 0F AD /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::r64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_2,
        .imm_format = imm_format::imm8,
        .opcode = {0x0FU, 0xACU, 0x00U, 0x00U},
        .name = "REX.W 0F AC /r ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::r16, special_case_any_rcx),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::mr_implicit,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xADU, 0x00U, 0x00U},
        .name = "66 0F AD /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::r16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_2,
        .imm_format = imm_format::imm8,
        .opcode = {0x0FU, 0xACU, 0x00U, 0x00U},
        .name = "66 0F AC /r ib",
      },
      instruction_encoding{},
    },
  };
}
