#pragma once
// GENERATED HEADER

#include <lisp/assembly/amd64/instruction.hpp>

namespace j::lisp::assembly::amd64::inst {
  constexpr inline instruction<19> add = {
    .name      = "add",
    .encodings = {
      {
        .mask = operand_mask(special_case_eax, operand_type_mask::imm32),
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm32,
        .opcode = {0x05U, 0x00U, 0x00U, 0x00U},
        .name = "05 id",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm32,
        .opcode = {0x81U, 0x00U, 0x00U, 0x00U},
        .name = "81 /0 id",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm8,
        .opcode = {0x83U, 0x00U, 0x00U, 0x00U},
        .name = "83 /0 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::r32),
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x01U, 0x00U, 0x00U, 0x00U},
        .name = "01 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm32),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x03U, 0x00U, 0x00U, 0x00U},
        .name = "03 /r",
      },
      {
        .mask = operand_mask(special_case_al, operand_type_mask::imm8),
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm8,
        .opcode = {0x04U, 0x00U, 0x00U, 0x00U},
        .name = "04 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm8,
        .opcode = {0x80U, 0x00U, 0x00U, 0x00U},
        .name = "80 /0 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::r8),
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x00U, 0x00U, 0x00U, 0x00U},
        .name = "00 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r8, operand_type_mask::rm8),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x02U, 0x00U, 0x00U, 0x00U},
        .name = "02 /r",
      },
      {
        .mask = operand_mask(special_case_rax, operand_type_mask::imm32),
        .has_rex_w = true,
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm32,
        .opcode = {0x05U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 05 id",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm32),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm32,
        .opcode = {0x81U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 81 /0 id",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm8,
        .opcode = {0x83U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 83 /0 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::r64),
        .has_rex_w = true,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x01U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 01 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x03U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 03 /r",
      },
      {
        .mask = operand_mask(special_case_ax, operand_type_mask::imm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm16,
        .opcode = {0x05U, 0x00U, 0x00U, 0x00U},
        .name = "66 05 iw",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm16,
        .opcode = {0x81U, 0x00U, 0x00U, 0x00U},
        .name = "66 81 /0 iw",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm8,
        .opcode = {0x83U, 0x00U, 0x00U, 0x00U},
        .name = "66 83 /0 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::r16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x01U, 0x00U, 0x00U, 0x00U},
        .name = "66 01 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x03U, 0x00U, 0x00U, 0x00U},
        .name = "66 03 /r",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<1> cdq = {
    .name      = "cdq",
    .encodings = {
      {
        .mask = operand_mask(special_case_edx, special_case_eax),
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x99U, 0x00U, 0x00U, 0x00U},
        .name = "99",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<1> cqo = {
    .name      = "cqo",
    .encodings = {
      {
        .mask = operand_mask(special_case_rdx, special_case_rax),
        .has_rex_w = true,
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x99U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 99",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<1> cwd = {
    .name      = "cwd",
    .encodings = {
      {
        .mask = operand_mask(special_case_dx, special_case_ax),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x99U, 0x00U, 0x00U, 0x00U},
        .name = "66 99",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<4> div = {
    .name      = "div",
    .encodings = {
      {
        .mask = operand_mask(special_case_edx, special_case_eax, operand_type_mask::rm32),
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 6,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "F7 /6",
      },
      {
        .mask = operand_mask(special_case_ax, operand_type_mask::rm8),
        .operand_format = operand_format::implicit_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 6,
        .opcode = {0xF6U, 0x00U, 0x00U, 0x00U},
        .name = "F6 /6",
      },
      {
        .mask = operand_mask(special_case_rdx, special_case_rax, operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 6,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W F7 /6",
      },
      {
        .mask = operand_mask(special_case_dx, special_case_ax, operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 6,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "66 F7 /6",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<4> idiv = {
    .name      = "idiv",
    .encodings = {
      {
        .mask = operand_mask(special_case_edx, special_case_eax, operand_type_mask::rm32),
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "F7 /7",
      },
      {
        .mask = operand_mask(special_case_ax, operand_type_mask::rm8),
        .operand_format = operand_format::implicit_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xF6U, 0x00U, 0x00U, 0x00U},
        .name = "F6 /7",
      },
      {
        .mask = operand_mask(special_case_rdx, special_case_rax, operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W F7 /7",
      },
      {
        .mask = operand_mask(special_case_dx, special_case_ax, operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 7,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "66 F7 /7",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<13> imul = {
    .name      = "imul",
    .encodings = {
      {
        .mask = operand_mask(special_case_edx, special_case_eax, operand_type_mask::rm32),
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "F7 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm32),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xAFU, 0x00U, 0x00U},
        .name = "0F AF /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm8,
        .opcode = {0x6BU, 0x00U, 0x00U, 0x00U},
        .name = "6B /r ib",
      },
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm32, operand_type_mask::imm32),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm32,
        .opcode = {0x69U, 0x00U, 0x00U, 0x00U},
        .name = "69 /r id",
      },
      {
        .mask = operand_mask(special_case_ax, operand_type_mask::rm8),
        .operand_format = operand_format::implicit_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xF6U, 0x00U, 0x00U, 0x00U},
        .name = "F6 /5",
      },
      {
        .mask = operand_mask(special_case_rdx, special_case_rax, operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W F7 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xAFU, 0x00U, 0x00U},
        .name = "REX.W 0F AF /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm8,
        .opcode = {0x6BU, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 6B /r ib",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm64, operand_type_mask::imm32),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm32,
        .opcode = {0x69U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 69 /r id",
      },
      {
        .mask = operand_mask(special_case_dx, special_case_ax, operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "66 F7 /5",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xAFU, 0x00U, 0x00U},
        .name = "66 0F AF /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm8,
        .opcode = {0x6BU, 0x00U, 0x00U, 0x00U},
        .name = "66 6B /r ib",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::rm16, operand_type_mask::imm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm16,
        .opcode = {0x69U, 0x00U, 0x00U, 0x00U},
        .name = "66 69 /r iw",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<4> mul = {
    .name      = "mul",
    .encodings = {
      {
        .mask = operand_mask(special_case_edx, special_case_eax, operand_type_mask::rm32),
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "F7 /4",
      },
      {
        .mask = operand_mask(special_case_ax, operand_type_mask::rm8),
        .operand_format = operand_format::implicit_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xF6U, 0x00U, 0x00U, 0x00U},
        .name = "F6 /4",
      },
      {
        .mask = operand_mask(special_case_rdx, special_case_rax, operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W F7 /4",
      },
      {
        .mask = operand_mask(special_case_dx, special_case_ax, operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::implicit2_m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 4,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "66 F7 /4",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<4> neg = {
    .name      = "neg",
    .encodings = {
      {
        .mask = operand_mask(operand_type_mask::rm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "F7 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xF6U, 0x00U, 0x00U, 0x00U},
        .name = "F6 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W F7 /3",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 3,
        .opcode = {0xF7U, 0x00U, 0x00U, 0x00U},
        .name = "66 F7 /3",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<19> sub = {
    .name      = "sub",
    .encodings = {
      {
        .mask = operand_mask(special_case_eax, operand_type_mask::imm32),
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm32,
        .opcode = {0x2DU, 0x00U, 0x00U, 0x00U},
        .name = "2D id",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm32,
        .opcode = {0x81U, 0x00U, 0x00U, 0x00U},
        .name = "81 /5 id",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm8,
        .opcode = {0x83U, 0x00U, 0x00U, 0x00U},
        .name = "83 /5 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::r32),
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x29U, 0x00U, 0x00U, 0x00U},
        .name = "29 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm32),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x2BU, 0x00U, 0x00U, 0x00U},
        .name = "2B /r",
      },
      {
        .mask = operand_mask(special_case_al, operand_type_mask::imm8),
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm8,
        .opcode = {0x2CU, 0x00U, 0x00U, 0x00U},
        .name = "2C ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm8,
        .opcode = {0x80U, 0x00U, 0x00U, 0x00U},
        .name = "80 /5 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::r8),
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x28U, 0x00U, 0x00U, 0x00U},
        .name = "28 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r8, operand_type_mask::rm8),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x2AU, 0x00U, 0x00U, 0x00U},
        .name = "2A /r",
      },
      {
        .mask = operand_mask(special_case_rax, operand_type_mask::imm32),
        .has_rex_w = true,
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm32,
        .opcode = {0x2DU, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 2D id",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm32),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm32,
        .opcode = {0x81U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 81 /5 id",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm8),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm8,
        .opcode = {0x83U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 83 /5 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::r64),
        .has_rex_w = true,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x29U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 29 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x2BU, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 2B /r",
      },
      {
        .mask = operand_mask(special_case_ax, operand_type_mask::imm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::implicit,
        .opcode_format = opcode_format::plain_1,
        .imm_format = imm_format::imm16,
        .opcode = {0x2DU, 0x00U, 0x00U, 0x00U},
        .name = "66 2D iw",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm16,
        .opcode = {0x81U, 0x00U, 0x00U, 0x00U},
        .name = "66 81 /5 iw",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 5,
        .imm_format = imm_format::imm8,
        .opcode = {0x83U, 0x00U, 0x00U, 0x00U},
        .name = "66 83 /5 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::r16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x29U, 0x00U, 0x00U, 0x00U},
        .name = "66 29 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x2BU, 0x00U, 0x00U, 0x00U},
        .name = "66 2B /r",
      },
      instruction_encoding{},
    },
  };
}
