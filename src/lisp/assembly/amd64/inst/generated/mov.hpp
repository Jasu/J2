#pragma once
// GENERATED HEADER

#include <lisp/assembly/amd64/instruction.hpp>

namespace j::lisp::assembly::amd64::inst {
  constexpr inline instruction<16> mov = {
    .name      = "mov",
    .encodings = {
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::imm32),
        .operand_format = operand_format::ri,
        .opcode_format = opcode_format::plus_reg_1,
        .imm_format = imm_format::imm32,
        .opcode = {0xB8U, 0x00U, 0x00U, 0x00U},
        .name = "B8+r id",
      },
      {
        .mask = operand_mask(operand_type_mask::r8, operand_type_mask::imm8),
        .operand_format = operand_format::ri,
        .opcode_format = opcode_format::plus_reg_1,
        .imm_format = imm_format::imm8,
        .opcode = {0xB0U, 0x00U, 0x00U, 0x00U},
        .name = "B0+r ib",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::imm64),
        .has_rex_w = true,
        .operand_format = operand_format::ri,
        .opcode_format = opcode_format::plus_reg_1,
        .imm_format = imm_format::imm64,
        .opcode = {0xB8U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W B8+r iq",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::imm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::ri,
        .opcode_format = opcode_format::plus_reg_1,
        .imm_format = imm_format::imm16,
        .opcode = {0xB8U, 0x00U, 0x00U, 0x00U},
        .name = "66 B8+r iw",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::r32),
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x89U, 0x00U, 0x00U, 0x00U},
        .name = "89 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm32, operand_type_mask::imm32),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm32,
        .opcode = {0xC7U, 0x00U, 0x00U, 0x00U},
        .name = "C7 /0 id",
      },
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm32),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x8BU, 0x00U, 0x00U, 0x00U},
        .name = "8B /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::r8),
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x88U, 0x00U, 0x00U, 0x00U},
        .name = "88 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm8, operand_type_mask::imm8),
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm8,
        .opcode = {0xC6U, 0x00U, 0x00U, 0x00U},
        .name = "C6 /0 ib",
      },
      {
        .mask = operand_mask(operand_type_mask::r8, operand_type_mask::rm8),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x8AU, 0x00U, 0x00U, 0x00U},
        .name = "8A /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::r64),
        .has_rex_w = true,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x89U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 89 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm64, operand_type_mask::imm32),
        .has_rex_w = true,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm32,
        .opcode = {0xC7U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W C7 /0 id",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm64),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x8BU, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 8B /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::r16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::mr,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x89U, 0x00U, 0x00U, 0x00U},
        .name = "66 89 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::rm16, operand_type_mask::imm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::m,
        .opcode_format = opcode_format::plain_1,
        .modrm_forced_r = 0,
        .imm_format = imm_format::imm16,
        .opcode = {0xC7U, 0x00U, 0x00U, 0x00U},
        .name = "66 C7 /0 iw",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x8BU, 0x00U, 0x00U, 0x00U},
        .name = "66 8B /r",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<5> movsx = {
    .name      = "movsx",
    .encodings = {
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm8),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xBEU, 0x00U, 0x00U},
        .name = "0F BE /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm16),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xBFU, 0x00U, 0x00U},
        .name = "0F BF /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm8),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xBEU, 0x00U, 0x00U},
        .name = "REX.W 0F BE /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm16),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xBFU, 0x00U, 0x00U},
        .name = "REX.W 0F BF /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::rm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xBEU, 0x00U, 0x00U},
        .name = "66 0F BE /r",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<3> movsxd = {
    .name      = "movsxd",
    .encodings = {
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm32),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x63U, 0x00U, 0x00U, 0x00U},
        .name = "63 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm32),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x63U, 0x00U, 0x00U, 0x00U},
        .name = "REX.W 63 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::rm16),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_1,
        .opcode = {0x63U, 0x00U, 0x00U, 0x00U},
        .name = "66 63 /r",
      },
      instruction_encoding{},
    },
  };
  constexpr inline instruction<5> movzx = {
    .name      = "movzx",
    .encodings = {
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm8),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xB6U, 0x00U, 0x00U},
        .name = "0F B6 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r32, operand_type_mask::rm16),
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xB7U, 0x00U, 0x00U},
        .name = "0F B7 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm8),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xB6U, 0x00U, 0x00U},
        .name = "REX.W 0F B6 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r64, operand_type_mask::rm16),
        .has_rex_w = true,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xB7U, 0x00U, 0x00U},
        .name = "REX.W 0F B7 /r",
      },
      {
        .mask = operand_mask(operand_type_mask::r16, operand_type_mask::rm8),
        .mandatory_prefix = mandatory_prefix::has_66,
        .operand_format = operand_format::rm,
        .opcode_format = opcode_format::plain_2,
        .opcode = {0x0FU, 0xB6U, 0x00U, 0x00U},
        .name = "66 0F B6 /r",
      },
      instruction_encoding{},
    },
  };
}
