Rule [Precedence 1] ineg(ineg($ $1)) -> $1;
Rule ineg(Const($2 $1)) -> Const($2 $1.Neg);
Rule [Precedence 2] iadd|isub|imul|idiv:$1(Const($2 $3) Const($4 $5)) -> Const($2 !+$ $4 Fold($1 $3 $5));

Rule iadd|isub:$1(IAddConst($2 $3 $4 $5) IAddConst($6 $7 $8 $9))
  -> IAddConst($2 +=! $6 $3 + $7 * If($1.Is(iadd) 1 -1) Construct(If($5 * If($1.Is(iadd) 1 -1) != $9 isub iadd) $4 MidPreFx($8 $2 $6)) $5);
Rule iadd|isub:$1(IAddConst($2 $3 $4 $5) $6) -> IAddConst($2 $3 Construct(If($5 == If($1.Is(iadd) 1 -1) iadd isub) $4 ApplyPostFxAsPreFx($6 $2)) $5);
Rule iadd|isub:$1($2 IAddConst($3 $4 $5 $6))
  -> IAddConst(_ $4 * If($1.Is(iadd) 1 -1) Construct(If($6 == If($1.Is(iadd) 1 -1) iadd isub) $2 ApplyFx($5 $3)) 1);

Rule imul(Const($1 $2) <-> $3) -> IMulConst($1 $2 $3);
Rule idiv(Const($1 $2) $3) -> IDivConstBy($1 $2 $3);
Rule idiv($3 Const($1 $2)) -> IDivConst($1 $2 $3);

Rule isub|iadd:$1($2 Const($3 $4)) -> IAddConst($3.AsPostFx() $4 * If($1.Is(iadd) 1 -1) $2 1);
Rule isub|iadd:$1(Const($2 $3) $4) -> IAddConst($2 $3 $4 If($1.Is(iadd) 1 -1));
Rule isub|iadd:$1(Const($2 $3) IAddConst($4 $5 $6 $7)) -> IAddConst($2 !+$ $4  $3 + $5 * If($1.Is(iadd) 1 -1) $6 $7 * If($1.Is(iadd) 1 -1));
Rule isub|iadd:$1(IAddConst($2 $3 $4 $5) Const($6 $7)) -> IAddConst($2 $+! $6 $3 + $7 * If($1.Is(iadd) 1 -1) $4 $5);

Rule ineg(IAddConst($1 $2 $3 $4)) -> IAddConst($1 $2.Neg $3 $4.Neg);
Rule ineg(IDivConstBy|IMulConst|IDivConst:$4($1 $2 $3)) -> {
  ! $2 = $2.Neg;
  !Copy $4;
};

Rule IAddConst($1 $2 $3 $4)
-> [Pred $2 == 0] ApplyFx(MaybeINeg($4 ApplyPreFx($3 $1)) $1)
-> [Pred $4 == -1 && $2 < 0] ineg(iadd(ApplyFx($3 $1) const($2.Neg)))
-> [Pred $4 == -1] isub(const($2) ApplyFx($3 $1))
-> ApplyFx(Construct(If($2 < 0 isub iadd) $3 ApplyPostFxAsPreFx(const(If($2 < 0 $2.Neg $2)) $1)) $1);

Rule IMulConst($1 $2 $3) -> ApplyFx(imul($3 ApplyPostFxAsPreFx(const($2) $1)) $1);
Rule IDivConst($1 $2 $3) -> ApplyFx(idiv($3 ApplyPostFxAsPreFx(const($2) $1)) $1);
Rule IDivConstBy($1 $2 $3) -> ApplyFx(idiv(const($2) $3) $1);

TestSuite "Lisp - AIR - TRS - IAdd" {
  Alias p progn;
  Alias p1 prog1;
  Alias c ld_const;
  Alias a iadd;
  Alias s isub;
  Alias m imul;
  Alias d idiv;
  Alias n ineg;
  Macro fx1 act_rec_parent(r1);
  Macro fx2 act_rec_parent(r2);

  Test "(+ a b)" a(r1 r2) -> a(r1 r2);
  Test "(+ 1 2)" a(1 2) -> c(3);
  Test "(+ a 1)" a(r1 1) -> a(r1 1);
  Test "(+ 1 a)" a(1 r1) -> a(r1 1);

  Test "(+ a 0)" a(r1 0) -> r1;
  Test "(+ 0 a)" a(0 r1) -> r1;
  Test "(+ 0 0)" a(0 0) -> c(0);

  Test "(+ (progn w1 1) (progn w2 1))" a(p(w1 1) p(w2 1)) -> p(w1 w2 2);
  Test "(+ (progn w1 1) (progn w2 0))" a(p(w1 1) p(w2 0)) -> p(w1 w2 1);
  Test "(+ (progn w1 0) (progn w2 1))" a(p(w1 0) p(w2 1)) -> p(w1 w2 1);
  Test "(+ (progn w1 0) (progn w2 0))" a(p(w1 0) p(w2 0)) -> p(w1 w2 0);

  Test "(+ (progn w1 (+ 1 a)) (progn w2 (+ 2 b)))" a(p(w1 a(1 r1)) p(w2 a(2 r2))) -> p(w1 a(a(r1 p(w2 r2)) 3));
  Test "(+ (progn w1 (+ 1 a)) (progn w2 0))" a(p(w1 a(1 r1)) p(w2 0)) -> p(w1 a(r1 p(w2 1)));
  Test "(+ (progn w1 0) (progn w2 (+ 1 a)))" a(p(w1 0) p(w2 a(1 r1))) -> p(w1 w2 a(r1 1));

  Test "(- a 1)" s(r1 1) -> s(r1 1);
  Test "(+ a -1)" a(r1 -1) -> s(r1 1);
  Test "(- a 0)" s(r1 0) -> r1;

  Test "(+ 1 (+ 2 a))" a(1 a(2 r1)) -> a(r1 3);
  Test "(+ (+ 1 a) 2)" a(a(1 r1) 2) -> a(r1 3);
  Test "(+ 1 (- 2 a))" a(1 s(2 r1)) -> s(3 r1);
  Test "(+ (- 1 a) 2)" a(s(1 r1) 2) -> s(3 r1);

  Test "(+ 1 (+ -1 a))" a(1 a(-1 r1)) -> r1;
  Test "(+ (+ 1 a) -1)" a(a(1 r1) -1) -> r1;

  Test "(+ (+ 1 a) (+ 2 b))" a(a(1 r1) a(2 r2)) -> a(a(r1 r2) 3);
  Test "(+ (+ 6 a) (+ -6 b))" a(a(6 r1) a(-6 r2)) -> a(r1 r2);

Test "(+ (+ 7 fx1) (+ 6 fx2))" a(a(6 fx1) a(7 fx2)) -> a(a(fx1 fx2) 13);
Test "(+ (+ 7 fx1) (+ -7 fx2))" a(a(7 fx1) a(-7 fx2)) -> a(fx1 fx2);

Test "(+ (progn w1 1) (progn w2 2))" a(p(w1 1) p(w2 2)) -> p(w1 w2 3);
Test "(+ (prog1 1 w1) (prog1 2 w2))" a(p1(1 w1) p1(2 w2)) -> p(w1 w2 3);
Test "(+ (prog1 1 w1) (progn w2 2))" a(p1(1 w1) p(w2 2)) -> p(w1 w2 3);
Test "(+ (progn w1 1) (prog1 2 w2))" a(p(w1 1) p1(2 w2)) -> p(w1 w2 3);
Test "(+ (progn w1 (+ 1 r1)) (prog1 (+ r2 2) w2))" a(p(w1 a(1 r1)) p1(a(r2 2) w2)) -> p(w1 a(a(r1 r2) p(w2 3)));
Test "(+ (prog1 (+ 1 r1) w1) (prog1 (+ r2 2) w2))" a(p1(a(1 r1) w1) p1(a(r2 2) w2)) -> a(a(r1 p(w1 r2)) p(w2 3));
Test "(+ (prog1 (+ 1 r1) w1) (progn w2 (+ r2 2)))" a(p1(a(1 r1) w1) p(w2 a(r2 2))) -> a(a(r1 p(w1 w2 r2)) 3);
Test "(+ (progn w1 (prog1 (+ 1 r1) w2)) (progn w3 (prog1 (+ r2 2) w4)))" a(p(w1 p1(a(1 r1) w2)) p(w3 p1(a(r2 2) w4))) -> p(w1 a(a(r1 p(w2 w3 r2)) p(w4 3)));

Test "(- (+ 7 r1))" n(a(7 r1)) -> n(a(r1 7));
Test "(- (- 7 r1))" n(s(7 r1)) -> s(r1 7);

Test "(- (p w1 (- (+ 7 r1))))" n(p(w1 n(a(7 r1)))) -> p(w1 a(r1 7));
Test "(- 9 (+ 7 r1))" s(9 a(7 r1)) -> s(2 r1);
Test "(- (+ 7 r1) 9)" s(a(7 r1) 9) -> s(r1 2);
Test "(- (- 7 r1) 9)" s(s(7 r1) 9) -> n(a(r1 2));

Test "(- (+ 7 r1) (+ r2 2))" s(a(7 r1) a(r2 2)) -> a(s(r1 r2) 5);
Test "(- (- 7 r1) (- 2 r2))" s(s(7 r1) s(2 r2)) -> s(5 s(r1 r2));
Test "(- (+ 7 r1) (- 2 r2))" s(a(7 r1) s(2 r2)) -> a(a(r1 r2) 5);
Test "(- (- 7 r1) (+ 2 r2))" s(s(7 r1) a(2 r2)) -> s(5 a(r1 r2));

Test "(+ (- 7 r1) (- 2 r2))" a(s(7 r1) s(2 r2)) -> s(9 a(r1 r2));
Test "(+ (+ 7 r1) (- 2 r2))" a(a(7 r1) s(2 r2)) -> a(s(r1 r2) 9);
Test "(+ (- 7 r1) (+ 2 r2))" a(s(7 r1) a(2 r2)) -> s(9 s(r1 r2));

Test "(- (+ 7 r1) r2)" s(a(7 r1) r2) -> a(s(r1 r2) 7);
Test "(- (- 7 r1) r2)" s(s(7 r1) r2) -> s(7 a(r1 r2));

Test "(- r2 (+ 7 r1))" s(r2 a(7 r1)) -> s(s(r2 r1) 7);
Test "(- r2 (- 7 r1))" s(r2 s(7 r1)) -> s(a(r2 r1) 7);

Test "(- r2 (+ (progn w1 7) r1))" s(r2 a(p(w1 7) r1)) -> s(s(r2 p(w1 r1)) 7);
Test "(- r2 (- (progn w1 7) r1))" s(r2 s(p(w1 7) r1)) -> s(a(r2 p(w1 r1)) 7);

Test "(- 1 2)" s(1 2) -> c(-1);
Test "(* 2 3)" m(2 3) -> c(6);
Test "(/ 7 2)" d(7 2) -> c(3);

  # Test "(/ 0 w1 w2)" d(0 w1 w2) -> p(w1 w2 0);
  # Test "(/ 0 w1 r2 7 w3)" d(0 w1 r2 7 w3) -> p(w1 r2 w3 0);
  # Test "(* 0 w1 w2)" m(0 w1 w2) -> p(w1 w2 0);
  # Test "(* 0 w1 r2 7 w3)" m(0 w1 r2 7 w3) -> p(w1 r2 w3 0);
  # Test "(/ w1 1 1)" d(w1 1 1) -> w1;
  # Test "(/ w1 1 -1)" d(w1 1 -1) -> n(w1);

  # Test "(/ r1 r2)" d(r1 r2) -> d(r1 r2);
  # Test "(/ r1 r2 r3)" d(r1 r2 r3) -> d(r1 m(r2 r3));
  # Test "(/ r1 r2 7)" d(r1 r2 7) -> d(r1 m(r2 7));
  # Test "(/ r1 r2 1)" d(r1 r2 1) -> d(r1 r2);
  # Test "(/ r1 r2 -1)" d(r1 r2 -1) -> n(d(r1 r2));

  # Test "(- (/ r1 r2)" n(d(r1 r2)) -> n(d(r1 r2));
  # Test "(- (/ r1 r2 r3)" n(d(r1 r2 r3)) -> n(d(r1 m(r2 r3)));
  # Test "(- (/ r1 r2 7)" n(d(r1 r2 7)) -> d(r1 m(r2 -7));
  # Test "(- (/ r1 r2 1)" n(d(r1 r2 1)) -> n(d(r1 r2));
  # Test "(- (/ r1 r2 -1)" n(d(r1 r2 -1)) -> d(r1 r2);

  # Test "(/ 13 (- w1) w2)" d(13 n(w1) w2) -> d(-13 m(w1 w2));
  # Test "(/ 13 (- w1) (- w2))" d(13 n(w1) n(w2)) -> d(13 m(w1 w2));
  # Test "(/ 13 3 (- w1) w2)" d(13 3 n(w1) w2) -> d(-4 m(w1 w2));
  # Test "(/ 13 3 (- w1) (- w2))" d(13 3 n(w1) n(w2)) -> d(4 m(w1 w2));
  # Test "(- (/ 13 (- w1) w2))" n(d(13 n(w1) w2)) -> d(13 m(w1 w2));
  # Test "(- (/ 13 (- w1) (- w2)))" n(d(13 n(w1) n(w2))) -> d(-13 m(w1 w2));
  # Test "(- (/ 13 3 (- w1) w2))" n(d(13 3 n(w1) w2)) -> d(4 m(w1 w2));
  # Test "(- (/ 13 3 (- w1) (- w2)))" n(d(13 3 n(w1) n(w2))) -> d(-4 m(w1 w2));

  # Test "(/ 10 11 (- w1) (- w2))" d(10 11 n(w1) n(w2)) -> p(w1 w2 0);
  # Test "(- (/ 10 11 (- w1) (- w2)))" n(d(10 11 n(w1) n(w2))) -> p(w1 w2 0);

  # Test "(- (/ w1 1 -1))" n(d(w1 1 -1)) -> w1;

  # Test "Empty imul" m() -> c(1);
  # Test "Empty iadd" a() -> c(0);
  # Test "Empty isub" s() -> c(0);

  # Test "(+ 0)" a(0) -> c(0);
  # Test "(- 0)" s(0) -> c(0);
  # Test "(* 0)" m(0) -> c(0);
  # Test "(/ 0)" d(0) -> c(0);
  # Test "(+ 8)" a(8) -> c(8);
  # Test "(- 8)" s(8) -> c(8);
  # Test "(* 8)" m(8) -> c(8);
  # Test "(/ 8)" d(8) -> c(8);

  # Test "(- (* a b))" n(m(r1 r2)) -> n(m(r1 r2));

  # Test "(* a 0)" m(r1 0) -> progn(r1 c(0));
  # Test "(* a b (- c))" m(r1 r2 n(r3)) -> n(m(r1 r2 r3));

  # Test "(* a b (* 3 c) (* 4 d))" m(r1 r2 m(3 r3) m(4 r4)) -> m(r1 r2 r3 r4 c(12));

  # Test "(* 2 a (- (* 3 b)))" m(2 r1 n(m(3 r2))) -> m(r1 r2 -6);
  # Test "(* 2 a (- b))" m(2 r1 n(r2)) -> m(r1 r2 -2);

  # Test "(+ 0 8)" a(0 8) -> c(8);
  # Test "(+ 1 2)" a(c(1) c(2)) -> c(3);
  # Test "(+ -1234 123)" a(-1234 123) -> c(-1111);
  # Test "(+ 0 1 0 2 0 3)" a(0 1 0 2 0 3) -> c(6);
  # Test "(- 0 8)" s(0 8) -> c(-8);
  # Test "(- 1 2)" s(c(1) c(2)) -> c(-1);
  # Test "(- -1234 123)" s(-1234 123) -> c(-1357);
  # Test "(- 0 1 0 2 0 3)" s(0 1 0 2 0 3) -> c(-6);
  # Test "(- 1 0 2 0 3 0)" s(1 0 2 0 3 0) -> c(-4);

  # Test "(- (- 0))" s(s(0)) -> c(0);
  # Test "(- (+ 0))" s(a(0)) -> c(0);
  # Test "(+ (- 0))" a(s(0)) -> c(0);
  # Test "(+ (+ 0))" a(a(0)) -> c(0);

  # Test "(- (- 7))" s(s(7)) -> c(7);
  # Test "(- (+ 7))" s(a(7)) -> c(7);
  # Test "(+ (- 7))" a(s(7)) -> c(7);
  # Test "(+ (+ 7))" a(a(7)) -> c(7);

  # Test "(- 7 3 (+ r1 r2))" s(7 3 a(r1 r2)) -> s(4 r1 r2);
  # Test "(- 7 a 7)" s(7 r1 7) -> n(r1);
  # Test "(- a 4 5))" s(r1 4 5) -> s(r1 c(9));
  # Test "(- 0 a b c)" s(0 r1 r2 r3) -> n(a(r1 r2 r3));
  # Test "(- a)" n(r1) -> n(r1);
  # Test "(- (- a))" n(n(r1)) -> r1;
  # Test "(+ a (+ b c) d)" a(r1 a(r2 r3) r4) -> a(r1 r2 r3 r4);
  # Test "(- a (+ b c) d)" s(r1 a(r2 r3) r4) -> s(r1 r2 r3 r4);
  # Test "(+ (+ a b 1) (+ c 2) (+ 7) (+ 1 1 d))" a(a(r1 r2 1) a(r3 2) a(7) a(1 1 r4)) -> a(r1 r2 r3 r4 12);
  # Test "(+ (progn (wr a 1) 2) (progn (wr b 2) 3))" a(p(w1 2) p(w2 3)) -> p(w1 w2 5);

  # Test "(- (- 1 b a 3))" n(s(1 r1 r2 3)) -> a(r1 r2 c(2));
  # Test "(- (- b a 3))" n(s(r1 r2 3)) -> n(s(r1 r2 c(3)));
  # Test "(- (- a b) c)" s(s(r1 r2) r3) -> s(r1 r2 r3);
  # Test "(- (- a 1 b 2) 3 c)" s(s(r1 1 r2 2) 3 r3) -> s(r1 r2 r3 6);
}
