Rule until(EmptyVec:$1) -> !Copy $1;
Rule until(Append:$1) -> !Copy $1;
Rule until(MkVec:$1) -> !Copy $1;
Rule until(Vec:$1) -> !Copy $1;
# Rule until(IAdd:$1) -> !Copy $1;
# Rule until(IMul:$1) -> !Copy $1;
# Rule until(ISub:$1) -> !Copy $1;
# Rule until(IDiv:$1) -> !Copy $1;
Rule until(Const:$4($1 $2 $3))
  -> [Pred $2.IsTruthy] !Copy $4
  -> until(progn(Release($1) $3));

Rule [Precedence 1] until(^until($ $1)) -> $1;

# TODO Make this to-bool(until($1))
# Rule [Precedence 1] until(^to-bool(/ $1)) -> $1;

TestSuite "Lisp - AIR - TRS - Until" {
  Alias u until;
  Alias p progn;
  Test "until((sym-wr a 1) empty-vec)" u(p(w1 empty-vec)) -> p(w1 empty-vec);
  Test "until((make-vec 10))" u(mk-vec(10)) -> mk-vec(10);
  Test "until((sym-wr a 1) (make-vec 10))" u(p(w1 mk-vec(10))) -> p(w1 mk-vec(10));
  Test "until(until(a))" u(u(r1)) -> u(r1);
  Test "until(until(until(a)))" u(u(u(r1))) -> u(r1);
}
