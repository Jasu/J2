File graphviz-formatter {
  Path "lisp/air/debug/graphviz_format.hpp"
  [
  | #pragma once
  | // GENERATED HEADER - EDITS WILL BE LOST.
  | #include "graphviz/table.hpp"
  |
  | namespace j::lisp::air::inline functions {
  |   struct air_function;
  | }
  | namespace j::lisp::air::exprs {
  |   struct expr;
  | }
  | namespace j::lisp::air::inline debug {
  |   [[nodiscard]] graphviz::table debug_to_table(const air_function * J_NOT_NULL fn,
  |                                                const exprs::expr * J_NOT_NULL expr, bool omit_result);
  |   [[nodiscard]] graphviz::table format_result_stub(const exprs::expr * J_NOT_NULL expr);
  | }
  ]

  Def RawExprAccess = "expr->";

  Path "lisp/air/debug/graphviz_format.cpp"
  [
  | // GENERATED FILE - EDITS WILL BE LOST.
  | #include "lisp/air/debug/graphviz_format.hpp"
  | #include "lisp/air/exprs/exprs.hpp"
  | #include "lisp/air/functions/air_function.hpp"
  | #include "lisp/common/metadata.hpp"
  | #include "graphviz/table.hpp"
  | #include "strings/format.hpp"
  |
  | namespace j::lisp::air::inline debug {
  { Indent
  | namespace e = exprs;
  | namespace g = graphviz;
  | namespace s = strings;
  |
  | namespace {
  |   inline const g::table_style s_title      {{},        "#FFFFFF", 10.0f, g::align_center, g::valign_middle, false, false, 1U};
  |   inline const g::table_style s_arg        {"#D0C8F4", "#000000", 7.5f, g::align_center, g::valign_middle, false, false, 1U};
  |   inline const g::table_style s_arg_name   {{}, "#FFFFFF", 10.0f, g::align_center, g::valign_middle, false, false, 0};
  |   inline const g::table_style s_input      {"#80C0FF", "#000000"};
  |   inline const g::table_style s_result     {"#F8A6F8", "#000000", 0.0f, g::align_center};
  |   inline const g::table_style s_source_loc {{}, "#F0F0F0", 0.0f, g::align_right, g::valign_none, false, false, 0};
  |   inline const g::table_style s_default    {"#FFE090", "#000000"};
  |
  |   inline const g::table_style s_true       {"#20D820", "#FFFFF0", 0.0f, g::align_center};
  |   inline const g::table_style s_false      {"#D01212", "#FFFFF0", 0.0f, g::align_center};
  |   inline const g::table_style s_nil        {"#7E7E8E", "#FFFFFF", 0.0f, g::align_center};
  |   inline const g::table_style s_sym        {"#2020C8", "#FFFFFF", 0.0f, g::align_center};
  |   inline const g::table_style s_i64        {"#20C820", "#FFFFFF", 0.0f, g::align_center};
  |
  |   struct J_TYPE_HIDDEN expr_debug_flags final {
  |     bool force_result:1;
  |     bool hide_result:1;
  |     bool hide_rep:1;
  |     bool hide_type:1;
  |     bool hide_inputs:1;
  |     bool inline_result:1;
  |  };
  |
  |   constexpr inline expr_debug_flags flag_tbl[num_expr_types_v]{
  { ForEach[T = Terms]
  |     [(u8_t)expr_type::%(T.Name)] = {%(T.@DebugForceResult),%(T.@DebugHideResult),%(T.@DebugHideRep),%(T.@DebugHideType),%(T.@DebugHideInputs),%(T.@DebugInlineResult)},
  }
  |  };
  |
  |   inline g::color expr_colors[num_expr_types_v]{
  { ForEach[Term = Terms]
  |     [(u8_t)expr_type::%(Term.Name)] = "%(Term.@DebugBg)",
  }
  |   };
  |
  |   [[nodiscard]] g::table make_table(const e::expr * J_NOT_NULL expr) {
  |     return g::table{g::table_style{expr_colors[(u8_t)expr->type], "#000000", 9.0f, g::align_left}};
  |   }
  |
  |   void push_pair(g::table & tbl, const char * J_NOT_NULL title, s::string && val) {
  |     tbl.push_row(s_default, {strings::string(title), static_cast<strings::string &&>(val)});
  |   }
  |
  |   void push_inline_title(g::table & tbl, const char * J_NOT_NULL title_fmt,
  |                          s::string && result, const e::expr * J_NOT_NULL expr) {
  |     tbl.push_flex_row((g::table_column[]){
  |       { s::format(title_fmt, expr->type), s_title, "r" },
  |       { static_cast<strings::string &&>(result), s_result},
  |     });
  |   }
  |
  |   void push_lex_title(g::table & tbl, const char * J_NOT_NULL title, s::string & result, air_var * J_NOT_NULL var) {
  |     tbl.push_flex_row((g::table_column[]){
  |         {title, s_title, "r"},
  |         {static_cast<strings::string &&>(result), s_result},
  |         {s::format("{}", var->name), s_default, "op0"},
  |     });
  |   }
  | }
  |
  | [[nodiscard]] g::table debug_to_table(const air_function * J_NOT_NULL fn,
  |                                       const e::expr * J_NOT_NULL expr, bool omit_result) {
  |   const auto flags = flag_tbl[(u8_t)expr->type];
  |
  |   strings::string result = ((omit_result && !flags.force_result) || flags.hide_result) ? ""
  |     : (flags.hide_rep ? s::format("{}", expr->result.types)
  |     : (flags.hide_type ? s::format("{}", expr->result.reps)
  |     : s::format("{}", expr->result)));
  |
  |   g::table tbl = make_table(expr);
  |
  |   if (flags.inline_result && result) {
  |     push_inline_title(tbl, "{}", static_cast<strings::string &&>(result), expr);
  |   } else {
  |     switch(expr->type) {
  { ForEach [Term = Terms.Filter[It.Has(@DebugCustomTitle)]]
  { Let [ExprAccess = "reinterpret_cast<const exprs::" + Term.Name + "*>(expr)->"]
  |     case expr_type::%(Term.Name): {
  { Indent 6
  | %(Term.@DebugCustomTitle)
  }
  |       break;
  |     }
  }}
  |     default:
  |       tbl.push_row(s_title, (s::string[]){s::format("{}", expr->type)});
  |       break;
  |     }
  |   }
  |
  |   if (!flags.hide_inputs) {
  |     for (u8_t idx = 0U, max = expr->num_inputs; idx != max; ++idx) {
  |       tbl.push_row((g::table_column[]){
  |         {s::format("Op {}", idx), s_input},
  |         {s::format("{}", expr->input(idx).type), s_input, s::format("op{}", idx)},
  |       });
  |     }
  |   }
  |
  |   switch(expr->type) {
  { ForEach [Term = Terms.Filter[It.Members.Some[It.Has(@DebugFmt) || It.Has(@DebugValue)]]]
  { Let [ExprAccess = "reinterpret_cast<const exprs::" + Term.Name + "*>(expr)->"]
  |     case expr_type::%(Term.Name):
  {   ForEach [Op = Term.Members.Filter[It.Has(@DebugFmt) || It.Has(@DebugValue)]]
  |       push_pair(tbl, %(Op.@DebugName), s::format("%(Op.@DebugFmt)", %(Op.@DebugValue)));
  }
  |       break;
  }}
  |     default: break;
  |   }
  |
  |
  |   if (!flags.inline_result) {
  |     if (result) {
  |       tbl.push_row((g::table_column[]){{static_cast<strings::string &&>(result), s_result, "r"}});
  |     } else {
  |       tbl.port = "r";
  |     }
  |   }
  |
  |   if(auto loc = expr->metadata().find(metadata_type::source_location)) {
  |     if (loc->source_location.line != 0 || loc->source_location.column != 0) {
  |       tbl.push_row(s_source_loc, (s::string[]){
  |         s::format("<font point-size=\\"3.0\\"><br/><font point-size=\\"6.5\\">{}</font></font>", loc->source_location),
  |       });
  |     }
  |   }
  |   return tbl;
  | }
  |
  | [[nodiscard]] g::table format_result_stub(const e::expr * J_NOT_NULL expr) {
  |   g::table tbl = make_table(expr);
  |   push_inline_title(tbl, "{}<br/><font point-size=\\"7.0\\">result</font>", s::format("{}", expr->result), expr);
  |   return tbl;
  | }
  }
  | }
  ]
}
